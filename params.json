{"name":"Monero Examples","tagline":"private-spend-key","body":"# Recover Monero address using the private spend key\r\n\r\n[Monero](https://getmonero.org/) `simplewallet` has a command called `spendkey` which prints\r\nout your private spend key. However, its not clear what to do with this private key.\r\n\r\nIt turns out, that this private key is the hexadecimal representation of the 25 word\r\nmnemonic seed, which `simplewallet` gives you when you create a new wallet. For example, the following mnemonic seed:\r\n\r\n```\r\nvinegar talent sorry hybrid ultimate template nimbly jukebox axes inactive veered toenail pride plotting chrome victim agnostic science bailed paddles wounded peaches king laptop king\r\n```\r\n\r\ncorresponds to this private spend key:\r\n\r\n```\r\n6ee02ef8647856f4080882a1ec4fabee19ec047ca24d3abb13c0ce589a46f702\r\n```\r\n\r\nSince mnemonic seed always you to restore your deterministic wallet, the same thing can be done\r\nwith just the private spend key. This includes recovery of your private view key.\r\nMore on Monero's keys and addresses can be found on [Address Generation Tests](http://xmrtests.llcoins.net/addresstests.html) website.\r\n\r\n\r\nThis example shows how to do this in C++ using Monero libraries.\r\n\r\n\r\n# Monero address\r\n\r\nMonero address is as a combination of public spend and view keys. The public keys\r\nare obtained directly from the corresponding private spend and view keys, respectively.\r\nThe private view key is obtained from the private spend key (in `simplewallet`),\r\nwhich in turn can be obtained from the mnemonic seed. This means that\r\nspend key is much more important than the view key, since it allows\r\n to recover your private view key (revers is not true). So what it means, is that you should not be disclosing your private spend key to strangers!\r\n\r\n\r\n\r\n Please note that this is not the only way of deriving private keys. For example, [MyMonero](https://mymonero.com/) is using a different procedure, which is not compatible with that in `simplewallet`. The procedure presented here is same as the one used in `simplewallet`. More on this is\r\n[here](http://xmrtests.llcoins.net/addresstests.html)\r\nand [here](https://en.reddit.com/r/Monero/comments/3s80l2/why_mymonero_key_derivation_is_different_than_for/).\r\n\r\n\r\n\r\n# Pre-requisites\r\n\r\nEverything here was done and tested on\r\nUbuntu 14.04 x86_64 and Ubuntu 15.10 x86_64.\r\n\r\nMonero source code compilation and setup are same as [here](http://moneroexamples.github.io/access-blockchain-in-cpp/).\r\n\r\n# C++ code\r\nThe most interesting C++ file is `main.cpp`.\r\nTherefore, I will present only that file here. Full source code is\r\nat [github](https://github.com/moneroexamples/spendkey.git). The github's version can\r\nalso be slightly different than the code presented here, as it might be updated\r\nmore frequently.\r\nSo for the latest version\r\nof this example, please check the github repository directly.\r\n\r\n\r\n## main.cpp\r\nThis is the main file of the example. The program takes\r\ntwo input arguments:\r\n\r\n - `spendkey,s` - the private spend key.\r\n - `mnemonic,m` - 25 word mnemonic representation of the spend key.\r\n\r\n\r\n```c++\r\n#include \"src/CmdLineOptions.h\"\r\n#include \"src/tools.h\"\r\n\r\n#include \"mnemonics/electrum-words.h\"\r\n\r\n\r\nusing crypto::ElectrumWords::words_to_bytes;\r\nusing crypto::ElectrumWords::bytes_to_words;\r\n\r\nusing xmreg::operator<<;\r\n\r\nusing namespace std;\r\n\r\nunsigned int epee::g_test_dbg_lock_sleep = 0;\r\n\r\nint main(int ac, const char* av[]) {\r\n\r\n    // get command line options\r\n    xmreg::CmdLineOptions opts {ac, av};\r\n\r\n    // if help was chosen, display help text and finish\r\n    if (opts.help_requested())\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    // default language for the mnemonic\r\n    // representation of the private spend key\r\n    string language {\"English\"};\r\n\r\n    // get private spend key options\r\n    auto spendkey_opt = opts.get_option<string>(\"spendkey\");\r\n    auto mnemonic_opt = opts.get_option<string>(\"mnemonic\");\r\n\r\n    // get the program command line options, or\r\n    // some default values for quick check\r\n    string spendkey_str = spendkey_opt ? *spendkey_opt : \"af6082af29108abda69cc385dfed2102b892a871695367cb22a4b9b6df8b3206\";\r\n    string mnemonic_str = mnemonic_opt ? *mnemonic_opt : \"spout midst duckling tepid odds glass enhanced avatar ocean rarest eavesdrop egotistic oxygen trying future airport session nanny tedious guru asylum superior cement cunning eavesdrop\";\r\n\r\n\r\n    crypto::secret_key private_spend_key;\r\n\r\n\r\n    if ((spendkey_opt && !mnemonic_opt) || (!spendkey_opt && !mnemonic_opt))\r\n    {\r\n        // if spend key is given or nothing is provided by the user,\r\n        // then derive the mnemonic using either key provided or the default one\r\n\r\n        if (spendkey_opt)\r\n        {\r\n            // use provided spend key by the user\r\n            spendkey_str = *spendkey_opt;\r\n        }\r\n\r\n        // parse string representing given private spend key\r\n        if (!xmreg::parse_str_secret_key(spendkey_str, private_spend_key))\r\n        {\r\n            cerr << \"Cant parse the spend key: \" << spendkey_str << endl;\r\n            return 1;\r\n        }\r\n\r\n        // derive the mnemonic version of the spend key.\r\n        // 25 word mnemonic that is provided by the simplewallet\r\n        // is just a word representation of the private spend key\r\n        if (!bytes_to_words(private_spend_key, mnemonic_str, language))\r\n        {\r\n            cerr << \"\\nCant create the mnemonic for the private spend key: \"\r\n                 << private_spend_key << endl;\r\n            return 1;\r\n        }\r\n    }\r\n    else if (!spendkey_opt && mnemonic_opt)\r\n    {\r\n        // if mnemonic is given, then derive the spend key\r\n        if (!words_to_bytes(*mnemonic_opt, private_spend_key, language))\r\n        {\r\n            cerr << \"\\nCant create private spend key for the mnemonic: \"\r\n                 << *mnemonic_opt << endl;\r\n            return 1;\r\n        }\r\n    }\r\n\r\n\r\n    cout << \"\\n\"\r\n         << \"Mnemonic: \" << mnemonic_str << endl;\r\n\r\n    // the seed for generation of private view key later on\r\n    // is the private spend key.\r\n    cout << \"\\n\"\r\n         << \"Hexadecimal seed : \" << private_spend_key << endl;\r\n\r\n\r\n    cout << \"\\n\"\r\n         << \"Private spend key: \" << private_spend_key << endl;\r\n\r\n\r\n    // we have private_spend_key, so now\r\n    // we need to get the corresponding\r\n    // public_spend_key\r\n    crypto::public_key public_spend_key;\r\n\r\n\r\n    // generate public key based on the private key\r\n    crypto::secret_key_to_public_key(private_spend_key, public_spend_key);\r\n\r\n\r\n    cout << \"Public spend key : \"  << public_spend_key  << endl;\r\n\r\n\r\n    // now its time to get the view keys.\r\n    // in monero's simplewallet, the private view key\r\n    // is generated using keccak hash of the private spend\r\n    // key. in other words, the hash of the private spend key\r\n    // is used for generating the private view key,\r\n    // and subsequently, its corresponding public view key.\r\n\r\n\r\n    crypto::hash hash_of_private_spend_key;\r\n\r\n    // calculate keccak hash of the private spend key\r\n    xmreg::keccak_hash(private_spend_key, hash_of_private_spend_key);\r\n\r\n\r\n    crypto::secret_key private_view_key;\r\n    crypto::public_key public_view_key;\r\n\r\n    // get the view keys using the hash_of_private_spend_key\r\n    // as the seed.\r\n    crypto::generate_keys(public_view_key, private_view_key,\r\n                          xmreg::get_key_from_hash<crypto::secret_key>(hash_of_private_spend_key),\r\n                          true /* recover keys*/);\r\n\r\n\r\n    cout << \"\\n\"\r\n         << \"Private view key : \"  << private_view_key << \"\\n\"\r\n         << \"Public view key  : \"  << public_view_key  << endl;\r\n\r\n\r\n    // once we have both private view and spend keys, we can get our\r\n    // address. Monero's address is a combination of the two\r\n    // public keys.\r\n    cryptonote::account_public_address address {public_spend_key, public_view_key};\r\n\r\n\r\n    cout << \"\\n\"\r\n         << \"Monero address   : \"  << address << endl;\r\n\r\n    cout << \"\\n\"\r\n         << \"End of program.\" << endl;\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n# Output example 1\r\nExecuting the program as follows:\r\n\r\n```bash\r\n./spendkey\r\n```\r\n\r\nResults in the following output:\r\n\r\n```bash\r\nMnemonic: spout midst duckling tepid odds glass enhanced avatar ocean rarest eavesdrop egotistic oxygen trying future airport session nanny tedious guru asylum superior cement cunning eavesdropspout midst duckling tepid odds glass enhanced avatar ocean rarest eavesdrop egotistic oxygen trying future airport session nanny tedious guru asylum superior cement cunning eavesdrop\r\n\r\nHexadecimal seed : <af6082af29108abda69cc385dfed2102b892a871695367cb22a4b9b6df8b3206>\r\n\r\nPrivate spend key: <af6082af29108abda69cc385dfed2102b892a871695367cb22a4b9b6df8b3206>\r\nPublic spend key : <7aff30fbdc005ecb03f57a11e250e0d665621ffde1d44c6aa84a8212cc0d1236>\r\n\r\nPrivate view key : <157874dc4e2961c872f87aaf4346146d0f596e2f116a51fbac01b693a8e3020a>\r\nPublic view key  : <25c1b6920540fbcfcb0e36bd2c88f5c1e62e5ef1d621279e7230b47648e64a63>\r\n\r\nMonero address   : <46HSxE7KoiDaxWFWR1wmJfcrunNj4TLiPJqiCJkQn345A4JJzgBNhUvbkrYWJX4EVJZS4kJGfGj7CTW8GEUHsbEZCEupMt6>\r\n```\r\nThese results agree with those obtained using\r\n [Address Generation Tests](http://xmrtests.llcoins.net/addresstests.html) website.\r\n\r\n# Output example 2\r\n\r\nExecuting the program as follows:\r\n\r\n```bash\r\n./spendkey -s 11830f8a232b7b0152a709340bb653357d2aa92985f83b6e0dcf7cb2bf11330d\r\n```\r\nResults in the following output:\r\n\r\n```bash\r\nMnemonic: spout midst duckling tepid odds glass enhanced avatar ocean rarest eavesdrop egotistic oxygen trying future airport session nanny tedious guru asylum superior cement cunning eavesdropsiblings together icing idols sovereign sprig suture aloof egotistic speedy diplomat impel wise glass long cafe perfect awakened ought enforce voted mime fight goggles egotistic\r\n\r\nHexadecimal seed : <11830f8a232b7b0152a709340bb653357d2aa92985f83b6e0dcf7cb2bf11330d>\r\n\r\nPrivate spend key: <11830f8a232b7b0152a709340bb653357d2aa92985f83b6e0dcf7cb2bf11330d>\r\nPublic spend key : <269e626955fe97f3853d768e0ad02bf92d0a95a8c03704fd8a96d5ad6a38c42a>\r\n\r\nPrivate view key : <21e63fb10d4adad609a327395e42d737bbd772dce53d64d2733c4aacc69eb300>\r\nPublic view key  : <b4e0cf1d4c7c60b590081db50e877e7576a36fb2c257f5f94932222d23d34b36>\r\n\r\nMonero address   : <435zP7PmQwYhjTJu7AmU8SigKVMsY9j3yjQfnwnfjRZM89Jp2ZxEpsyXNPKkr5hfwBLeYTiZeqfaLihPNWWEzbgN77gqFHp>\r\n```\r\n\r\nThese results also agree with those obtained using\r\n [Address Generation Tests](http://xmrtests.llcoins.net/addresstests.html) website.\r\n\r\n# Output example 3\r\nExecuting the program as follows:\r\n```bash\r\n./spendkey -m \"essential future brunt cajun upper ammo incur smelting usual tyrant tattoo virtual long hectare idols guarded blender usage ghost sample eagle shelter does dozen usage\"\r\n\r\n```\r\nResults in the following output:\r\n\r\n```bash\r\nMnemonic: essential future brunt cajun upper ammo incur smelting usual tyrant tattoo virtual long hectare idols guarded blender usage ghost sample eagle shelter does dozen usage\r\n\r\nHexadecimal seed : <0a0214cf7716292246d277214830411b20d3cd08cd119dcd9e149d7bd1151e02>\r\n\r\nPrivate spend key: <0a0214cf7716292246d277214830411b20d3cd08cd119dcd9e149d7bd1151e02>\r\nPublic spend key : <7e9f73449c1b3a9a83c25a641a95c8f74f7ccd309dd3fba5222ce349052af567>\r\n\r\nPrivate view key : <bd613fbad795df25b8218a7e4f80f4e3158db0646d1cb7d22d84f0b603a0f60b>\r\nPublic view key  : <fad7d278ee9fedf0034da1812115c5a369d6bd67e1b076afbc4aee579a609ce3>\r\n\r\nMonero address   : <46RRCV68frZSqzBsh9TWf9iNDrYhPkABUUd16zFLoPECJPjd3AtuTyeh9RhSWAqiCLULKGf9SC1UHWPra64ykRiTSg3RPmW>\r\n```\r\n\r\nThese results also agree with those obtained using\r\n [Address Generation Tests](http://xmrtests.llcoins.net/addresstests.html) website.\r\n\r\n\r\n## Compile this example\r\nThe dependencies are same as those for Monero, so I assume Monero compiles\r\ncorrectly. If so then to download and compile this example, the following\r\nsteps can be executed:\r\n\r\n```bash\r\n# download the source code\r\ngit clone https://github.com/moneroexamples/spendkey.git\r\n\r\n# enter the downloaded sourced code folder\r\ncd spendkey\r\n\r\n# create the makefile\r\ncmake .\r\n\r\n# compile\r\nmake\r\n```\r\n\r\nAfter this, `spendkey` executable file should be present in access-blockchain-in-cpp\r\nfolder. How to use it, can be seen in the above example outputs.\r\n\r\n\r\n## How can you help?\r\n\r\nConstructive criticism, code and website edits are always good. They can be made through github.\r\n\r\nSome Monero are also welcome:\r\n```\r\n48daf1rG3hE1Txapcsxh6WXNe9MLNKtu7W7tKTivtSoVLHErYzvdcpea2nSTgGkz66RFP4GKVAsTV14v6G3oddBTHfxP6tU\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}